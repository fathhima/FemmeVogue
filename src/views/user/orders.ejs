<div class="container mx-auto px-4 py-8">
    <h2 class="text-2xl font-bold mb-6">My Orders</h2>

    <% if (orders && orders.length> 0) { %>
        <div class="w-full">
            <table class="min-w-full bg-white shadow-md rounded-lg">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="px-6 py-3 text-left"></th>
                        <th class="px-6 py-3 text-left">Order ID</th>
                        <th class="px-6 py-3 text-left">Date</th>
                        <th class="px-6 py-3 text-left">Total</th>
                        <th class="px-6 py-3 text-left">Status</th>
                        <th class="px-6 py-3 text-left">Payment</th>
                        <th class="px-6 py-3 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% orders.forEach(order=> { %>
                        <tr class="border-b">
                            <td class="px-6 py-4">
                                <button onclick="toggleOrderDetails('<%= order._id %>')" class="text-blue-500">
                                    <span id="arrow-<%= order._id %>">▶</span>
                                </button>
                            </td>
                            <td class="px-6 py-4">
                                <%= order._id.toString().slice(-6).toUpperCase() %>
                            </td>
                            <td class="px-6 py-4">
                                <%= new Date(order.orderedAt).toLocaleDateString() %>
                            </td>
                            <td class="px-6 py-4">₹<%= order.finalTotal %>
                            </td>
                            <td class="px-6 py-4">
                                <span class="<%= order.orderStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' : 
                                               order.orderStatus === 'processing' ? 'bg-blue-100 text-blue-800' :
                                               order.orderStatus === 'delivered' ? 'bg-green-100 text-green-800' :
                                               'bg-red-100 text-red-800' %> 
                                       px-2 py-1 rounded-full text-sm">
                                    <%= order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1) %>
                                </span>
                            </td>
                            <td class="px-6 py-4">
                                <%= order.paymentMethod.toUpperCase() %> - <%= order.paymentStatus %>
                            </td>
                            <td class="px-1 py-10 flex justify-end space-x-2">
                                <button data-order="<%- JSON.stringify(order).replace(/"/g, '&quot;') %>"
                                    onclick="viewOrderDetails(this.dataset.order)"
                                    class="bg-blue-500 text-white px-2 py-2 text-sm rounded hover:bg-blue-600">
                                View
                            </button>                             

                                <% if (order.orderStatus === 'processing') { %>
                                    <button onclick="showCancelDialog('<%= order._id %>', 'full')"
                                        class="bg-red-500 text-white px-2 py-2 text-sm rounded hover:bg-red-600">
                                        Cancel Order
                                    </button>
                                <% } else if (order.orderStatus === 'delivered') { %>
                                    <button onclick="showReturnDialog('<%= order._id %>', 'full')"
                                        class="bg-yellow-500 text-white px-2 py-2 text-sm rounded hover:bg-yellow-600">
                                        Return Order
                                    </button>
                                <% } else if (order.paymentMethod === 'razorpay' && order.paymentStatus === 'failed') { %>
                                        <button 
                                            onclick="retryRazorpayPayment('<%= order._id %>')" 
                                            class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                                        >
                                            Retry Payment
                                        </button>
                                <% } %>
                            </td>
                        </tr>
                        <!-- Expandable Product Details -->
                        <tr id="details-<%= order._id %>" class="hidden bg-gray-50">
                            <td colspan="7" class="px-6 py-4">
                                <div class="space-y-4">
                                    <h4 class="font-semibold">Order Items:</h4>
                                    <table class="min-w-full">
                                        <thead class="bg-gray-100">
                                            <tr>
                                                <th class="px-4 py-2 text-left">Product</th>
                                                <th class="px-4 py-2 text-left">Price</th>
                                                <th class="px-4 py-2 text-left">Quantity</th>
                                                <th class="px-4 py-2 text-left">Status</th>
                                                <th class="px-4 py-2 text-left">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            <% order.items.forEach(product => { %>
                                                <tr>
                                                    <td class="px-4 py-2"><%= product.productId.brandName %></td>
                                                    <td class="px-4 py-2">₹<%= product.price %></td>
                                                    <td class="px-4 py-2"><%= product.quantity %></td>
                                                    <td class="px-4 py-2"><%= product.status %></td>
                                                    <td class="px-4 py-2">
                                                        <% if (product.status === 'pending' || product.status === 'processing') { %>
                                                            <button
                                                                onclick="showCancelDialog('<%= order._id %>', 'product', '<%= product.id %>')"
                                                                class="text-red-500 hover:text-red-700">
                                                                Cancel Item
                                                            </button>
                                                        <% } else if (product.status === 'delivered') { %>
                                                            <button
                                                                onclick="showReturnDialog('<%= order._id %>', 'product', '<%= product.id %>')"
                                                                class="text-yellow-500 hover:text-yellow-700">
                                                                Return Item
                                                            </button>
                                                        <% } %>
                                                    </td>
                                                </tr>
                                            <% }) %>
                                        </tbody>
                                    </table>
                                </div>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>
    <% } else { %>
        <div class="bg-white p-8 text-center rounded-lg shadow">
            <p class="text-gray-600">No orders found</p>
        </div>
    <% } %>
</div>

<!-- View Order Details Modal -->
<div id="viewOrderModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center" style="z-index: 1500;">
    <div class="bg-white p-6 rounded-lg max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Order Details</h3>
            <div class="flex items-center gap-4">
            <button id="downloadInvoiceBtn" 
                        onclick="downloadInvoice()"
                        class="hidden px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z" clip-rule="evenodd" />
                    </svg>
                    Download Invoice
                </button>
            <button onclick="hideViewOrderModal()" class="text-gray-500 hover:text-gray-700">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12">
                    </path>
                </svg>
            </button>
        </div>
        </div>
        <div class="space-y-4">
            <!-- Order Information -->
            <div class="grid grid-cols-2 gap-4">
                <div>
                    <h4 class="font-medium text-gray-700">Order Information</h4>
                    <div class="mt-2 space-y-2">
                        <p><span class="font-medium">Order ID:</span> <span id="viewOrderId"></span></p>
                        <p><span class="font-medium">Order Date:</span> <span id="viewOrderDate"></span></p>
                        <p><span class="font-medium">Order Status:</span> <span id="viewOrderStatus"></span></p>
                    </div>
                </div>
                <div>
                    <h4 class="font-medium text-gray-700">Payment Details</h4>
                    <div class="mt-2 space-y-2">
                        <p><span class="font-medium">Payment Method:</span> <span id="viewPaymentMethod"></span></p>
                        <p><span class="font-medium">Payment Status:</span> <span id="viewPaymentStatus"></span></p>
                    </div>
                </div>
            </div>

            <!-- Shipping Address -->
            <div>
                <h4 class="font-medium text-gray-700">Shipping Address</h4>
                <div class="mt-2 p-3 bg-gray-50 rounded">
                    <p><span id="viewShippingName"></span></p>
                    <p><span id="viewShippingAddress"></span></p>
                    <p>Phone: <span id="viewShippingPhone"></span></p>
                    <p>Type: <span id="viewAddressType"></span></p>
                </div>
            </div>

            <!-- Order Items -->
            <div>
                <h4 class="font-medium text-gray-700">Order Items</h4>
                <div class="mt-2" id="viewOrderItems">
                    <!-- Items will be inserted here -->
                </div>
            </div>

            <!-- Price Breakdown -->
            <div>
                <h4 class="font-medium text-gray-700">Price Details</h4>
                <div class="mt-2 space-y-2">
                    <div class="flex justify-between">
                        <span>Subtotal:</span>
                        <span id="viewSubtotal"></span>
                    </div>
                    <div class="flex justify-between">
                        <span>Shipping Charge:</span>
                        <span id="viewShippingCharge"></span>
                    </div>
                    <div class="flex justify-between font-medium">
                        <span>Total Amount:</span>
                        <span id="viewFinalTotal"></span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Cancel Dialog (Hidden by default) -->
<div id="cancelDialog" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Cancel Confirmation</h3>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">
                Reason for Cancellation
            </label>
            <select id="cancelReason" class="w-full p-2 border rounded mb-2">
                <option value="">Select a reason</option>
                <option value="changed_mind">Changed my mind</option>
                <option value="better_price">Found better price elsewhere</option>
                <option value="delivery_time">Delivery time too long</option>
                <option value="mistake">Ordered by mistake</option>
                <option value="payment_issue">Payment issues</option>
                <option value="other">Other (specify)</option>
            </select>
            <input type="text" id="customReason" placeholder="Specify your reason"
                class="w-full p-2 border rounded hidden">
        </div>
        <div class="flex justify-end space-x-3">
            <button onclick="hideCancelDialog()" class="px-4 py-2 text-gray-600 hover:text-gray-800">
                Cancel
            </button>
            <button onclick="confirmCancel()" class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600">
                Confirm
            </button>
        </div>
    </div>
</div>

<!-- Return Dialog -->
<div id="returnDialog" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
    <div class="bg-white p-6 rounded-lg max-w-md w-full mx-4">
        <h3 class="text-lg font-semibold mb-4">Return Request</h3>
        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">
                Reason for Return
            </label>
            <select id="returnReason" class="w-full p-2 border rounded mb-2">
                <option value="">Select a reason</option>
                <option value="defective">Product is defective/damaged</option>
                <option value="wrong_item">Received wrong item</option>
                <option value="size_issue">Size/fit issues</option>
                <option value="quality_issue">Quality not as expected</option>
                <option value="not_needed">No longer needed</option>
                <option value="other">Other (specify)</option>
            </select>
            <input type="text" id="customReturnReason" placeholder="Specify your reason"
                class="w-full p-2 border rounded hidden">
            
            <label class="block text-sm font-medium text-gray-700 mt-4 mb-2">
                Additional Comments
            </label>
            <textarea id="returnComments" class="w-full p-2 border rounded" rows="3"
                placeholder="Please provide any additional details about the return..."></textarea>
        </div>
        <div class="flex justify-end space-x-3">
            <button onclick="hideReturnDialog()" class="px-4 py-2 text-gray-600 hover:text-gray-800">
                Cancel
            </button>
            <button onclick="confirmReturn()" class="px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600">
                Submit Return Request
            </button>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>

    let currentCancelData = null;

    function toggleOrderDetails(orderId) {
        const detailsRow = document.getElementById(`details-${orderId}`);
        const arrow = document.getElementById(`arrow-${orderId}`);

        if (detailsRow.classList.contains('hidden')) {
            detailsRow.classList.remove('hidden');
            arrow.textContent = '▼';
        } else {
            detailsRow.classList.add('hidden');
            arrow.textContent = '▶';
        }
    }

    function viewOrderDetails(orderData) {
        const order = JSON.parse(orderData);
        document.getElementById('viewOrderId').textContent = order._id.toString().slice(-6).toUpperCase();
        document.getElementById('viewOrderDate').textContent = new Date(order.orderedAt).toLocaleString();
        document.getElementById('viewOrderStatus').textContent = order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1);
        document.getElementById('viewPaymentMethod').textContent = order.paymentMethod.toUpperCase();
        document.getElementById('viewPaymentStatus').textContent = order.paymentStatus;

        document.getElementById('viewShippingName').textContent = order.shippingAddress.name;
        document.getElementById('viewShippingAddress').textContent = order.shippingAddress.addressLine;
        document.getElementById('viewShippingPhone').textContent = order.shippingAddress.phone;
        document.getElementById('viewAddressType').textContent = order.shippingAddress.addressType;

        const itemsContainer = document.getElementById('viewOrderItems');
        itemsContainer.innerHTML = `
            <table class="min-w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-4 py-2 text-left">Product</th>
                        <th class="px-4 py-2 text-left">Price</th>
                        <th class="px-4 py-2 text-left">Quantity</th>
                        <th class="px-4 py-2 text-left">Status</th>
                    </tr>
                </thead>
                <tbody>
                    ${order.items.map(item => `
                        <tr class="border-b">
                            <td class="px-4 py-2">${item.productId.brandName}</td>
                            <td class="px-4 py-2">₹${item.price}</td>
                            <td class="px-4 py-2">${item.quantity}</td>
                            <td class="px-4 py-2">${item.status}</td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        `;

        document.getElementById('viewSubtotal').textContent = `₹${order.subtotal}`;
        document.getElementById('viewShippingCharge').textContent = `₹${order.shippingCharge}`;
        document.getElementById('viewFinalTotal').textContent = `₹${order.finalTotal}`;

        document.getElementById('viewOrderModal').classList.remove('hidden');
    }

    function hideViewOrderModal() {
        document.getElementById('viewOrderModal').classList.add('hidden');
    }

    function showCancelDialog(orderId, type, productId = null) {
        currentCancelData = { orderId, type, productId };
        document.getElementById('cancelDialog').classList.remove('hidden');
        document.getElementById('cancelReason').value = '';
        document.getElementById('customReason').value = '';
        document.getElementById('customReason').classList.add('hidden');
    }

    function hideCancelDialog() {
        document.getElementById('cancelDialog').classList.add('hidden');
        currentCancelData = null;
    }

    document.getElementById('cancelReason').addEventListener('change', function () {
        const customReasonInput = document.getElementById('customReason');
        if (this.value === 'other') {
            customReasonInput.classList.remove('hidden');
        } else {
            customReasonInput.classList.add('hidden');
        }
    });

    async function confirmCancel() {
        const reasonSelect = document.getElementById('cancelReason');
        const customReasonInput = document.getElementById('customReason');

        if (!reasonSelect.value) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please select a cancellation reason'
            });
            return;
        }

        const reason = reasonSelect.value === 'other' ? customReasonInput.value : reasonSelect.value;

        if (reasonSelect.value === 'other' && !customReasonInput.value.trim()) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please specify your reason'
            });
            return;
        }

        try {
            const endpoint = currentCancelData.type === 'full'
                ? `/profile/orders/${currentCancelData.orderId}/cancel`
                : `/profile/orders/${currentCancelData.orderId}/products/${currentCancelData.productId}/cancel`;

            const response = await axios.post(endpoint, {
                reason: reason
            });

            if (response.status === 200) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Cancellation successful',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.response?.data?.message || 'An error occurred while processing your request'
            });
        }

        hideCancelDialog();
    }

    window.addEventListener('click', function (event) {
        const viewOrderModal = document.getElementById('viewOrderModal');
        const cancelDialog = document.getElementById('cancelDialog');

        if (event.target === viewOrderModal) {
            hideViewOrderModal();
        }

        if (event.target === cancelDialog) {
            hideCancelDialog();
        }
    });

    document.addEventListener('keydown', function (event) {
        if (event.key === 'Escape') {
            hideViewOrderModal();
            hideCancelDialog();
        }
    });

    function formatCurrency(amount) {
        return new Intl.NumberFormat('en-IN', {
            style: 'currency',
            currency: 'INR',
            minimumFractionDigits: 2
        }).format(amount);
    }

    function formatDate(dateString) {
        return new Date(dateString).toLocaleString('en-IN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    function safeJSONParse(str) {
        try {
            return JSON.parse(str);
        } catch (e) {
            console.error('Error parsing JSON:', e);
            return null;
        }
    }

    function viewOrderDetails(orderData) {
        const order = safeJSONParse(orderData);
        if (!order) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to load order details'
            });
            return;
        }

        try {

        currentOrderId = order._id;
        
        const downloadButton = document.getElementById('downloadInvoiceBtn');
        if (order.orderStatus === 'delivered') {
            downloadButton.classList.remove('hidden');
        } else {
            downloadButton.classList.add('hidden');
        }
            document.getElementById('viewOrderId').textContent = order._id.toString().slice(-6).toUpperCase();
            document.getElementById('viewOrderDate').textContent = formatDate(order.orderedAt);
            document.getElementById('viewOrderStatus').textContent = order.orderStatus.charAt(0).toUpperCase() + order.orderStatus.slice(1);
            document.getElementById('viewPaymentMethod').textContent = order.paymentMethod.toUpperCase();
            document.getElementById('viewPaymentStatus').textContent = order.paymentStatus;

            document.getElementById('viewShippingName').textContent = order.shippingAddress.name;
            document.getElementById('viewShippingAddress').textContent = order.shippingAddress.addressLine;
            document.getElementById('viewShippingPhone').textContent = order.shippingAddress.phone;
            document.getElementById('viewAddressType').textContent = order.shippingAddress.addressType;

            const itemsContainer = document.getElementById('viewOrderItems');
            itemsContainer.innerHTML = `
    <table class="min-w-full">
        <thead class="bg-gray-50">
            <tr>
                <th class="px-4 py-2 text-left">Product</th>
                <th class="px-4 py-2 text-left">Price</th>
                <th class="px-4 py-2 text-left">Quantity</th>
                <th class="px-4 py-2 text-left">Status</th>
            </tr>
        </thead>
        <tbody>
            ${order.items.map(item => `
                <tr class="border-b">
                    <td class="px-4 py-2">${item.productId.brandName || 'N/A'}</td>
                    <td class="px-4 py-2">${formatCurrency(item.price)}</td>
                    <td class="px-4 py-2">${item.quantity}</td>
                    <td class="px-4 py-2">${item.status}</td>
                </tr>
            `).join('')}
        </tbody>
    </table>
`;

            document.getElementById('viewSubtotal').textContent = formatCurrency(order.subtotal);
            document.getElementById('viewShippingCharge').textContent = formatCurrency(order.shippingCharge);
            document.getElementById('viewFinalTotal').textContent = formatCurrency(order.finalTotal);

            document.getElementById('viewOrderModal').classList.remove('hidden');
        } catch (error) {
            console.error('Error displaying order details:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Failed to display order details'
            });
        }
    }

    async function downloadInvoice() {
    if (!currentOrderId) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Order ID not found'
        });
        return;
    }

    try {
        const button = document.getElementById('downloadInvoiceBtn');
        const originalContent = button.innerHTML;
        button.innerHTML = `
            <svg class="animate-spin h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Generating...
        `;
        button.disabled = true;

        const response = await axios({
            url: `/profile/orders/${currentOrderId}/invoice`,
            method: 'GET',
            responseType: 'blob' 
        });

        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `invoice-${currentOrderId}.pdf`);
        document.body.appendChild(link);
        link.click();
        
        link.parentNode.removeChild(link);
        window.URL.revokeObjectURL(url);
        
        button.innerHTML = originalContent;
        button.disabled = false;

    } catch (error) {
        console.error('Download failed:', error);
        Swal.fire({
            icon: 'error',
            title: 'Download Failed',
            text: 'Failed to download invoice. Please try again later.'
        });
        
        button.innerHTML = originalContent;
        button.disabled = false;
    }
}

    async function performAction(actionFn, loadingMessage = 'Processing...') {
        try {
            Swal.fire({
                title: loadingMessage,
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            await actionFn();

            Swal.close();
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'An error occurred'
            });
        }
    }

    document.addEventListener('DOMContentLoaded', function () {
        console.log('Order management system initialized');
    });

    let currentReturnData = null;

    function showReturnDialog(orderId, type, productId = null) {
        currentReturnData = { orderId, type, productId };
        document.getElementById('returnDialog').classList.remove('hidden');
        document.getElementById('returnReason').value = '';
        document.getElementById('customReturnReason').value = '';
        document.getElementById('returnComments').value = '';
        document.getElementById('customReturnReason').classList.add('hidden');
    }

    function hideReturnDialog() {
        document.getElementById('returnDialog').classList.add('hidden');
        currentReturnData = null;
    }

    document.getElementById('returnReason').addEventListener('change', function() {
        const customReasonInput = document.getElementById('customReturnReason');
        if (this.value === 'other') {
            customReasonInput.classList.remove('hidden');
        } else {
            customReasonInput.classList.add('hidden');
        }
    });

    async function confirmReturn() {
        const reasonSelect = document.getElementById('returnReason');
        const customReasonInput = document.getElementById('customReturnReason');
        const comments = document.getElementById('returnComments').value;

        if (!reasonSelect.value) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please select a return reason'
            });
            return;
        }

        const reason = reasonSelect.value === 'other' ? customReasonInput.value : reasonSelect.value;

        if (reasonSelect.value === 'other' && !customReasonInput.value.trim()) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please specify your reason'
            });
            return;
        }

        try {
            const endpoint = currentReturnData.type === 'full'
                ? `/profile/orders/${currentReturnData.orderId}/return`
                : `/profile/orders/${currentReturnData.orderId}/products/${currentReturnData.productId}/return`;

            const response = await axios.post(endpoint, {
                reason: reason,
                comments: comments
            });

            if (response.status === 200) {
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return request submitted successfully',
                    showConfirmButton: false,
                    timer: 1500
                }).then(() => {
                    window.location.reload();
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.response?.data?.message || 'An error occurred while processing your request'
            });
        }

        hideReturnDialog();
    }

    async function retryRazorpayPayment(orderId) {
    try {
        Swal.fire({
            title: 'Initializing Payment',
            text: 'Please wait...',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        const response = await axios.post('/orders/retry-razorpay-payment', {
            orderId: orderId
        });

        if (!response.data.success) {
            throw new Error(response.data.message);
        }

        const options = {
            key: response.data.key_id,
            amount: response.data.order.amount,
            currency: response.data.order.currency,
            name: 'Your Store Name',
            description: 'Order Payment Retry',
            order_id: response.data.order.id,
            handler: async function(response) {
                try {
                    const verifyResponse = await axios.post('/checkout/verify-razorpay-payment', {
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_signature: response.razorpay_signature,
                        orderId: orderId,
                        status: response.status || 'success',
                        isRetry: true
                    });

                    if (verifyResponse.data.success) {
                        await Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful!',
                            text: 'Your payment has been completed.',
                            timer: 2000,
                            showConfirmButton: false
                        });
                        
                        window.location.reload();
                    }
                } catch (error) {
                    console.error('Payment verification failed:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Payment Verification Failed',
                        text: 'There was an error verifying your payment. Please contact support.',
                        confirmButtonColor: '#3085d6'
                    });
                }
            },
            modal: {
                ondismiss: async function() {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Payment Cancelled',
                        text: 'You cancelled the payment retry.',
                        confirmButtonColor: '#3085d6'
                    });
                }
            },
        };

        const razorpay = new Razorpay(options);
        razorpay.open();

    } catch (error) {
        console.error('Retry payment failed:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Could not initiate payment retry. Please try again.',
            confirmButtonColor: '#3085d6'
        });
    }
}

    // Add to your existing event listeners
    window.addEventListener('click', function(event) {
        const returnDialog = document.getElementById('returnDialog');
        if (event.target === returnDialog) {
            hideReturnDialog();
        }
    });

    // Update your existing keydown listener
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape') {
            hideReturnDialog();
        }
    });

</script>
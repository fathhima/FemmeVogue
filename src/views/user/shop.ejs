<!DOCTYPE html>
<html lang="en">

<head>
    <title>Product</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--===============================================================================================-->
    <link rel="icon" type="image/png" href="images/icons/favicon.png" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/bootstrap/css/bootstrap.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/iconic/css/material-design-iconic-font.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/linearicons-v1.0.0/icon-font.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animate/animate.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/css-hamburgers/hamburgers.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animsition/css/animsition.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/select2/select2.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/daterangepicker/daterangepicker.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/slick/slick.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/MagnificPopup/magnific-popup.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/perfect-scrollbar/perfect-scrollbar.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/css/util.css">
    <link rel="stylesheet" type="text/css" href="/css/main.css">
    <!--===============================================================================================-->

    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <style>
        .main-container {
            display: flex;
            gap: 2rem;
            padding: 2rem;
        }

        .filter-sidebar {
            width: 280px;
            padding: 1rem;
            background: #fff;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            margin-top: 100px;
        }

        .filter-section {
            margin-bottom: 1.5rem;
        }

        .filter-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .search-sort-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .search-container {
            flex: 1;
            max-width: 400px;
            margin-right: 1rem;
        }

        .search-input {
            width: 100%;
            padding: 0.5rem 1rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .sort-container {
            min-width: 200px;
        }

        .sort-select {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .brand-search {
            width: 100%;
            padding: 0.5rem;
            margin-bottom: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }

        .brand-list {
            max-height: 200px;
            overflow-y: auto;
        }

        .price-ranges {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .color-options {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
        }

        .color-option {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
        }

        .color-option.selected {
            border-color: #000;
        }

        .products-container {
            flex: 1;
            margin-top: 100px;
        }

        /* .card-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(284px, 1fr));
            gap: 1.5rem;
        } */

        .active-filters {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .filter-tag {
            background: #f0f0f0;
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-tag button {
            border: none;
            background: none;
            cursor: pointer;
            padding: 0;
            color: #666;
        }

        .checkbox-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-section {
            border-bottom: 1px solid #eee;
            padding-bottom: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .filter-section:last-child {
            border-bottom: none;
            padding-bottom: 0;
        }

        .category-search,
        .brand-search {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            margin-bottom: 1rem;
            font-size: 0.9rem;
        }

        .checkbox-label {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 0.25rem 0;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .checkbox-label:hover {
            background-color: #f5f5f5;
        }

        .checkbox-label input[type="checkbox"] {
            margin-right: 8px;
        }

        .count {
            color: #666;
            font-size: 0.85rem;
            margin-left: auto;
        }

        .category-list,
        .brand-list {
            max-height: 250px;
            overflow-y: auto;
            scrollbar-width: thin;
            scrollbar-color: #888 #f1f1f1;
        }

        .category-list::-webkit-scrollbar,
        .brand-list::-webkit-scrollbar {
            width: 6px;
        }

        .category-list::-webkit-scrollbar-track,
        .brand-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }

        .category-list::-webkit-scrollbar-thumb,
        .brand-list::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }

        .checkbox-group label {
            display: flex;
            align-items: center;
            padding: 6px 0;
        }
    </style>

</head>

<body class="animsition">

    <!-- Navbar -->
    <%-include("partials/navbar")%>

        <div class="main-container">
            <!-- Filter Sidebar -->
            <aside class="filter-sidebar">
                <!-- Categories Section -->
                <div class="filter-section">
                    <h3 class="filter-title">Categories</h3>
                    <input type="text" class="category-search" placeholder="Search categories..." id="categorySearch">
                    <div class="category-list checkbox-group">
                        <% const categories=[...new Set(Products.map(p=> p.category.name))].sort() %>
                            <% Categories.forEach(category=> { %>
                                <label class="checkbox-label">
                                    <input type="checkbox" name="category" value="<%= category %>">
                                    <%= category.name %>
                                        <% // Count products in each category 
                                        const count=Products.filter(p=>
                                            p.category.name === category).length
                                            %>
                                            <span class="count">(<%= count %>)</span>
                                </label>
                                <% }) %>
                    </div>
                </div>

                <!-- Brands Section -->
                <div class="filter-section">
                    <h3 class="filter-title">Brands</h3>
                    <input type="text" class="brand-search" placeholder="Search brands..." id="brandSearch">
                    <div class="brand-list checkbox-group" style="padding-right: 10px;">
                        <% const uniqueBrands=[...new Set(Products.map(p=> p.brandName))].sort() %>
                            <% uniqueBrands.forEach(brand=> { %>
                                <label class="checkbox-label">
                                    <input type="checkbox" name="brand" value="<%= brand %>">
                                    <%= brand %>
                                        <% <!--Count products for each brand-->
                                            const count = Products.filter(p => p.brandName === brand).length
                                            %>
                                            <span class="count">(<%= count %>)</span>
                                </label>
                                <% }) %>
                    </div>
                </div>

                <!-- Price Range Section -->
                <div class="filter-section">
                    <h3 class="filter-title">Price Range</h3>
                    <div class="price-ranges checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="0-500">
                            Below ₹500
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="500-1000">
                            ₹500 - ₹1,000
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="1000-5000">
                            ₹1,000 - ₹5,000
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="5000+">
                            Above ₹5,000
                        </label>
                    </div>
                </div>

                <!-- Colors Section -->
                <!-- <div class="filter-section">
				<h3 class="filter-title">Colors</h3>
				<div class="color-options">
					<% const colors = ['#000000', '#4272d7', '#b3b3b3', '#00ad5f', '#fa4251', '#ffffff'] %>
					<% const colorNames = ['Black', 'Blue', 'Grey', 'Green', 'Red', 'White'] %>
					<% colors.forEach((color, index) => { %>
						<div class="color-option" 
							 style="background-color: <%- color %>;" 
							 data-color="<%= colorNames[index] %>"
							 title="<%= colorNames[index] %>">
						</div>
					<% }) %>
				</div>
			</div> -->
            </aside>

            <!-- Main Content -->
            <main class="products-container">
                <!-- Search and Sort -->
                <div class="search-sort-container">
                    <div class="search-container">
                        <input type="text" class="search-input" id="productSearch" placeholder="Search products...">
                    </div>
                    <div class="sort-container">
                        <select class="sort-select" id="sortSelect">
                            <option value="">Sort By</option>
                            <option value="popularity">Popularity</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                            <option value="new">New Arrivals</option>
                            <option value="a-z">Name: A to Z</option>
                            <option value="z-a">Name: Z to A</option>
                        </select>
                    </div>
                </div>

                <button class="clear-filters-btn" style="display: none;">Clear All Filters</button>

                <!-- Active Filters -->
                <div class="active-filters" id="activeFilters"></div>

                <!-- Products Grid -->
                <div class="card-container" id="productsGrid">
                    <% Products.forEach(product=> { %>
                        <div class="card" data-category="<%= product.category.name %>"
                            data-brand="<%= product.brandName %>"
                            data-price="<%= product.finalPrice || product.originalPrice %>"
                            data-name="<%= product.brandName %>">
                            <a href="/product-detail/<%= product._id%>">
                                <img src="<%= product.image[0] %>" alt="<%= product.name %>" class="card-image">
                                <div class="card-content">
                                    <h3 class="card-title">
                                        <%= product.brandName %>
                                    </h3>
                                    <p class="card-description">
                                        <%= product.description %>
                                    </p>
                                    <div class="price-wishlist">
                                        <div class="price-container">
                                            <% if (product.hasOffer) { %>
                                                <p class="card-price">
                                                    Rs. <%= Math.floor(product.finalPrice) %>
                                                        <span class="original-price">Rs. <%=
                                                                Math.floor(product.originalPrice) %></span>
                                                        <% const discountPercent=Math.floor((product.discountAmount /
                                                            product.originalPrice) * 100) %>
                                                            <span class="discount-percent">-<%= discountPercent %>
                                                                    %</span>
                                                </p>
                                                <% } else { %>
                                                    <p class="card-price">Rs. <%= Math.floor(product.originalPrice) %>
                                                    </p>
                                                    <% } %>
                                        </div>
                                        <button onclick="toggleWishlist('<%= product._id %>', event)"
                                            class="wishlist-btn" data-product-id="<%= product._id %>">
                                            <i class="wishlist-icon far fa-heart"></i>
                                        </button>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <% }); %>
                </div>
            </main>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


        <script>

            document.addEventListener('DOMContentLoaded', function () {
                const productsGrid = document.getElementById('productsGrid');
                const productSearch = document.getElementById('productSearch');
                const categorySearch = document.getElementById('categorySearch');
                const brandSearch = document.getElementById('brandSearch');
                const sortSelect = document.getElementById('sortSelect');
                const activeFilters = document.getElementById('activeFilters');

                let currentFilters = {
                    search: '',
                    category: [],
                    brands: [],
                    priceRange: [],
                    sort: '',
                    page: 1
                };

                // Debounce function
                function debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }

                // Fetch products with filters using axios
                async function fetchProducts(showLoader = true) {
                    if (showLoader) {
                        productsGrid.innerHTML = '<div class="loader">Loading...</div>';
                    }

                    const queryParams = {};
                    Object.entries(currentFilters).forEach(([key, value]) => {
                        if (Array.isArray(value) && value.length > 0) {
                            queryParams[key] = value.join(',');
                        } else if (value && !Array.isArray(value)) {
                            queryParams[key] = value;
                        }
                    });

                    try {
                        const response = await axios.get('/shop', {
                            params: queryParams,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        const data = response.data;
                        updateProductsGrid(data.Products);
                        // updatePagination(data.pagination);
                        updateURL();
                    } catch (error) {
                        console.error('Error fetching products:', error);
                        productsGrid.innerHTML = '<div class="error">Error loading products. Please try again.</div>';
                    }
                }

                // Update products grid
                function updateProductsGrid(products) {
                    console.log(products)
                    productsGrid.innerHTML = products.map(product => `
            <div class="card">
                <img src="${product.image[0]}" alt="${product.name}">
                <div class="card-content">
                    <h3>${product.brandName}</h3>
                    <p class="brand">${product.description}</p>
                    <div class="price">
                        <span class="final-price">₹${product.finalPrice}</span>
                        ${product.hasOffer ? `<span class="original-price">₹${product.originalPrice}</span>` : ''}
                    </div>
                </div>
            </div>
        `).join('');
                }

                // Update active filters display
                function updateActiveFilters() {
                    activeFilters.innerHTML = '';

                    if (currentFilters.search) {
                        addFilterTag('Search: ' + currentFilters.search, 'search');
                    }

                    currentFilters.category.forEach(category => {
                        addFilterTag('Category: ' + category, 'category-' + category);
                    });

                    currentFilters.brands.forEach(brand => {
                        addFilterTag('Brand: ' + brand, 'brand-' + brand);
                    });

                    currentFilters.priceRange.forEach(range => {
                        addFilterTag('Price: ' + formatPriceRange(range), 'price-' + range);
                    });

                    // Show/hide clear all button
                    const clearButton = document.querySelector('.clear-filters-btn');
                    const hasFilters = Object.values(currentFilters).some(value =>
                        Array.isArray(value) ? value.length > 0 : Boolean(value)
                    );
                    clearButton.style.display = hasFilters ? 'block' : 'none';
                }

                // Format price range for display
                function formatPriceRange(range) {
                    if (range === '5000+') return 'Above ₹5,000';
                    const [min, max] = range.split('-');
                    return `₹${min} - ₹${max}`;
                }

                // Add filter tag
                function addFilterTag(text, id) {
                    const tag = document.createElement('div');
                    tag.className = 'filter-tag';
                    tag.innerHTML = `
            ${text}
            <button onclick="removeFilter('${id}')">&times;</button>
        `;
                    activeFilters.appendChild(tag);
                }

                // Remove filter
                window.removeFilter = function (filterId) {
                    if (filterId === 'search') {
                        currentFilters.search = '';
                        productSearch.value = '';
                    } else {
                        const [type, value] = filterId.split('-');
                        const filterKey = type + 's';
                        currentFilters[filterKey] = currentFilters[filterKey].filter(item => item !== value);

                        // Uncheck corresponding checkbox
                        const checkbox = document.querySelector(`input[name="${type}"][value="${value}"]`);
                        if (checkbox) checkbox.checked = false;
                    }

                    currentFilters.page = 1;
                    updateActiveFilters();
                    fetchProducts();
                };

                // Event Listeners
                productSearch.addEventListener('input', debounce(() => {
                    currentFilters.search = productSearch.value;
                    currentFilters.page = 1;
                    fetchProducts();
                }, 300));

                // Category search
                categorySearch.addEventListener('input', (e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    document.querySelectorAll('.category-list .checkbox-label').forEach(label => {
                        const categoryName = label.textContent.split('(')[0].trim().toLowerCase();
                        label.style.display = categoryName.includes(searchTerm) ? '' : 'none';
                    });
                });
                
                // Brand search
                brandSearch.addEventListener('input', (e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    document.querySelectorAll('.brand-list .checkbox-label').forEach(label => {
                        const brandName = label.textContent.split('(')[0].trim().toLowerCase();
                        label.style.display = brandName.includes(searchTerm) ? '' : 'none';
                    });
                });

                // Sort select
                sortSelect.addEventListener('change', () => {
                    currentFilters.sort = sortSelect.value;
                    currentFilters.page = 1;
                    fetchProducts();
                });

                // Category checkboxes
                document.querySelectorAll('input[name="category"]').forEach(checkbox => {
                    checkbox.addEventListener('change', e => {
                        if (e.target.checked) {
                            currentFilters.category.push(e.target.value);
                        } else {
                            currentFilters.category = currentFilters.category
                                .filter(c => c !== e.target.value);
                        }
                        currentFilters.page = 1;
                        updateActiveFilters();
                        fetchProducts();
                    });
                });

                // Brand checkboxes
                document.querySelectorAll('input[name="brand"]').forEach(checkbox => {
                    checkbox.addEventListener('change', e => {
                        if (e.target.checked) {
                            currentFilters.brands.push(e.target.value);
                        } else {
                            currentFilters.brands = currentFilters.brands
                                .filter(b => b !== e.target.value);
                        }
                        currentFilters.page = 1;
                        updateActiveFilters();
                        fetchProducts();
                    });
                });

                // Price range checkboxes
                document.querySelectorAll('input[name="price"]').forEach(checkbox => {
                    checkbox.addEventListener('change', e => {
                        if (e.target.checked) {
                            currentFilters.priceRange.push(e.target.value);
                        } else {
                            currentFilters.priceRange = currentFilters.priceRange
                                .filter(p => p !== e.target.value);
                        }
                        currentFilters.page = 1;
                        updateActiveFilters();
                        fetchProducts();
                    });
                });

                // Update URL with current filters
                function updateURL() {
                    const url = new URL(window.location);
                    Object.entries(currentFilters).forEach(([key, value]) => {
                        if (Array.isArray(value) && value.length > 0) {
                            url.searchParams.set(key, value.join(','));
                        } else if (value && !Array.isArray(value)) {
                            url.searchParams.set(key, value);
                        } else {
                            url.searchParams.delete(key);
                        }
                    });
                    window.history.pushState({}, '', url);
                }

                // Initialize filters from URL
                function initializeFiltersFromURL() {
                    const params = new URLSearchParams(window.location.search);

                    params.forEach((value, key) => {
                        if (Array.isArray(currentFilters[key])) {
                            currentFilters[key] = value.split(',');
                            // Check corresponding checkboxes
                            currentFilters[key].forEach(val => {
                                const checkbox = document.querySelector(`input[name="${key.slice(0, -1)}"][value="${val}"]`);
                                if (checkbox) checkbox.checked = true;
                            });
                        } else {
                            currentFilters[key] = value;
                            if (key === 'search') {
                                productSearch.value = value;
                            } else if (key === 'sort') {
                                sortSelect.value = value;
                            }
                        }
                    });

                    updateActiveFilters();
                }

                // Initialize
                initializeFiltersFromURL();
            });
        </script>
        <!--===============================================================================================-->
        <script src="vendor/perfect-scrollbar/perfect-scrollbar.min.js"></script>
        <script src="vendor/animsition/js/animsition.min.js"></script>

        <script>
            $('.js-pscroll').each(function () {
                $(this).css('position', 'relative');
                $(this).css('overflow', 'hidden');
                var ps = new PerfectScrollbar(this, {
                    wheelSpeed: 1,
                    scrollingThreshold: 1000,
                    wheelPropagation: false,
                });

                $(window).on('resize', function () {
                    ps.update();
                })
            });
        </script>
        <!--===============================================================================================-->
        <script src="js/main.js"></script>
        <style>
            .price-wishlist {
                display: flex;
                align-items: center;
                justify-content: space-between;
                gap: 10px;
                padding: 5px 0;
            }

            .price-container {
                flex-grow: 1;
            }

            .card-price {
                margin: 0;
                font-size: 16px;
                display: flex;
                align-items: center;
                gap: 8px;
                flex-wrap: wrap;
            }

            .original-price {
                text-decoration: line-through;
                color: #999;
                font-size: 14px;
            }

            .discount-percent {
                background-color: #ff4444;
                color: white;
                padding: 2px 6px;
                border-radius: 3px;
                font-size: 12px;
            }

            .wishlist-icon {
                cursor: pointer;
                padding: 5px;
            }

            .wishlist-icon i:hover {
                color: #ff4444;
            }

            .loader {
                text-align: center;
                padding: 20px;
            }

            .error {
                text-align: center;
                color: red;
                padding: 20px;
            }
        </style>
</body>

</html>
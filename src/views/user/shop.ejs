<!DOCTYPE html>
<html lang="en">

<head>
    <title>Product</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--===============================================================================================-->
    <link rel="icon" type="image/png" href="images/icons/favicon.png" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/bootstrap/css/bootstrap.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/iconic/css/material-design-iconic-font.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/linearicons-v1.0.0/icon-font.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animate/animate.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/css-hamburgers/hamburgers.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animsition/css/animsition.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/select2/select2.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/daterangepicker/daterangepicker.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/slick/slick.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/MagnificPopup/magnific-popup.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/perfect-scrollbar/perfect-scrollbar.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/css/util.css">
    <link rel="stylesheet" type="text/css" href="/css/main.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
</head>

<body class="animsition">

    <!-- Navbar -->
    <%-include("partials/navbar")%>

        <div class="main-container">
            <!-- Filter Sidebar -->
            <aside class="filter-sidebar">
                <!-- Categories Section -->
                <div class="filter-section">
                    <h3 class="filter-title">Categories</h3>
                    <input type="text" class="category-search" placeholder="Search categories..." id="categorySearch">
                    <div class="category-list checkbox-group" style="padding-right: 10px;">
                        <% Categories.forEach(category=> { %>
                            <label class="checkbox-label">
                                <input type="checkbox" name="category" value="<%= category.name %>">
                                <%= category.name %>
                                <% const count = Products.filter(p => p.category.name === category.name).length %>
                                <span class="count">(<%= count %>)</span>
                            </label>
                        <% }) %>
                    </div>
                </div>

                <!-- Brands Section -->
                <div class="filter-section">
                    <h3 class="filter-title">Brands</h3>
                    <input type="text" class="brand-search" placeholder="Search brands..." id="brandSearch">
                    <div class="brand-list checkbox-group" style="padding-right: 10px;">
                        <% const uniqueBrands=[...new Set(Products.map(p=> p.brandName))].sort() %>
                            <% uniqueBrands.forEach(brand=> { %>
                                <label class="checkbox-label">
                                    <input type="checkbox" name="brand" value="<%= brand %>">
                                    <%= brand %>
                                        <% <!--Count products for each brand-->
                                            const count = Products.filter(p => p.brandName === brand).length
                                            %>
                                            <span class="count">(<%= count %>)</span>
                                </label>
                                <% }) %>
                    </div>
                </div>

                <!-- Price Range Section -->
                <div class="filter-section">
                    <h3 class="filter-title">Price Range</h3>
                    <div class="price-ranges checkbox-group">
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="0-500">
                            Below ₹500
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="500-1000">
                            ₹500 - ₹1,000
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="1000-5000">
                            ₹1,000 - ₹5,000
                        </label>
                        <label class="checkbox-label">
                            <input type="checkbox" name="price" value="5000+">
                            Above ₹5,000
                        </label>
                    </div>
                </div>

                <!-- Colors Section -->
                <!-- <div class="filter-section">
				<h3 class="filter-title">Colors</h3>
				<div class="color-options">
					<% const colors = ['#000000', '#4272d7', '#b3b3b3', '#00ad5f', '#fa4251', '#ffffff'] %>
					<% const colorNames = ['Black', 'Blue', 'Grey', 'Green', 'Red', 'White'] %>
					<% colors.forEach((color, index) => { %>
						<div class="color-option" 
							 style="background-color: <%- color %>;" 
							 data-color="<%= colorNames[index] %>"
							 title="<%= colorNames[index] %>">
						</div>
					<% }) %>
				</div>
			</div> -->
            </aside>

            <!-- Main Content -->
            <main class="products-container">
                <!-- Search and Sort -->
                <div class="search-sort-container">
                    <div class="search-container">
                        <input type="text" class="search-input" id="productSearch" placeholder="Search products...">
                    </div>
                    <div class="sort-container">
                        <select class="sort-select" id="sortSelect">
                            <option value="">Sort By</option>
                            <option value="popularity">Popularity</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                            <option value="new">New Arrivals</option>
                            <option value="a-z">Name: A to Z</option>
                            <option value="z-a">Name: Z to A</option>
                        </select>
                    </div>
                </div>

                <button class="clear-filters-btn" style="display: none;">Clear All Filters</button>

                <!-- Active Filters -->
                <div class="active-filters" id="activeFilters"></div>

                <!-- Products Grid -->
                <div class="card-container" id="productsGrid">
                    <% Products.forEach(product=> { %>
                        <div class="card" data-category="<%= product.category.name %>"
                            data-brand="<%= product.brandName %>"
                            data-price="<%= product.finalPrice || product.originalPrice %>"
                            data-name="<%= product.brandName %>">
                            <a href="/product-detail/<%= product._id%>">
                                <img src="<%= product.image[0] %>" alt="<%= product.name %>" class="card-image" loading="lazy">
                                <div class="card-content">
                                    <h3 class="card-title">
                                        <%= product.brandName %>
                                    </h3>
                                    <p class="card-description">
                                        <%= product.description %>
                                    </p>
                                    <div class="price-wishlist">
                                        <div class="price-container">
                                            <% if (product.hasOffer) { %>
                                                <p class="card-price">
                                                    Rs. <%= Math.floor(product.finalPrice) %>
                                                        <span class="original-price">Rs. <%=
                                                                Math.floor(product.originalPrice) %></span>
                                                        <% const discountPercent=Math.floor((product.discountAmount /
                                                            product.originalPrice) * 100) %>
                                                            <span class="discount-percent">-<%= discountPercent %>
                                                                    %</span>
                                                </p>
                                                <% } else { %>
                                                    <p class="card-price">Rs. <%= Math.floor(product.originalPrice) %>
                                                    </p>
                                                    <% } %>
                                        </div>
                                        <div class="wishlist-icon small-wishlist" data-product-id="<%= product._id %>"
                                            onclick="toggleWishlist('<%= product._id %>')">
                                            <i class="fa-regular fa-heart"></i>
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <% }); %>
                </div>
            </main>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

        <script>

            document.addEventListener('DOMContentLoaded', function () {
                const productsGrid = document.getElementById('productsGrid');
                const productSearch = document.getElementById('productSearch');
                const categorySearch = document.getElementById('categorySearch');
                const brandSearch = document.getElementById('brandSearch');
                const sortSelect = document.getElementById('sortSelect');
                const activeFilters = document.getElementById('activeFilters');

                let currentFilters = {
                    search: '',
                    category: [],
                    brands: [],
                    priceRange: [],
                    sort: '',
                    page: 1
                };

                // Debounce function
                function debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }

                // Update URL with current filters
                function updateURL() {
                    const params = new URLSearchParams();

                    // Add each filter to URL params if it has a value
                    Object.entries(currentFilters).forEach(([key, value]) => {
                        if (Array.isArray(value) && value.length > 0) {
                            params.set(key, value.join(','));
                        } else if (value && !Array.isArray(value)) {
                            params.set(key, value);
                        }
                    });

                    // Construct the new URL
                    const newURL = `${window.location.pathname}${params.toString() ? '?' + params.toString() : ''}`;

                    // Update browser history without reloading the page
                    window.history.pushState({}, '', newURL);
                }

                // Fetch products with filters using axios
                async function fetchProducts(showLoader = true) {
                    if (showLoader) {
                        productsGrid.innerHTML = '<div class="loader">Loading...</div>';
                    }

                    const queryParams = {};
                    Object.entries(currentFilters).forEach(([key, value]) => {
                        if (Array.isArray(value) && value.length > 0) {
                            queryParams[key] = value.join(',');
                        } else if (value && !Array.isArray(value)) {
                            queryParams[key] = value;
                        }
                    });

                    try {
                        const response = await axios.get('/shop', {
                            params: queryParams,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });
                        console.log(response.data)

                        const data = response.data;
                        updateProductsGrid(data.Products);
                        updateURL();
                    } catch (error) {
                        console.error('Error fetching products:', error);
                        productsGrid.innerHTML = '<div class="error">Error loading products. Please try again.</div>';
                    }
                }

                // Update products grid with the original card structure
                function updateProductsGrid(products) {
                    productsGrid.innerHTML = products.map(product => `
            <div class="card" 
                data-category="${product.category.name}"
                data-brand="${product.brandName}"
                data-price="${product.finalPrice || product.originalPrice}"
                data-name="${product.brandName}">
                <a href="/product-detail/${product._id}">
                    <img src="${product.image[0]}" alt="${product.name}" class="card-image">
                    <div class="card-content">
                        <h3 class="card-title">${product.brandName}</h3>
                        <p class="card-description">${product.description}</p>
                        <div class="price-wishlist">
                            <div class="price-container">
                                ${product.hasOffer ? `
                                    <p class="card-price">
                                        Rs. ${Math.floor(product.finalPrice)}
                                        <span class="original-price">Rs. ${Math.floor(product.originalPrice)}</span>
                                        <span class="discount-percent">-${Math.floor((product.discountAmount / product.originalPrice) * 100)}%</span>
                                    </p>
                                ` : `
                                    <p class="card-price">Rs. ${Math.floor(product.originalPrice)}</p>
                                `}
                            </div>
                            <button onclick="toggleWishlist('${product._id}', event)"
                                class="wishlist-btn" data-product-id="${product._id}">
                                <i class="wishlist-icon far fa-heart"></i>
                            </button>
                        </div>
                    </div>
                </a>
            </div>
        `).join('');
                }

                // Update active filters display
                function updateActiveFilters() {
                    activeFilters.innerHTML = '';

                    if (currentFilters.search) {
                        addFilterTag('Search: ' + currentFilters.search, 'search');
                    }

                    currentFilters.category.forEach(category => {
                        addFilterTag('Category: ' + category, 'category-' + category);
                    });

                    currentFilters.brands.forEach(brand => {
                        addFilterTag('Brand: ' + brand, 'brand-' + brand);
                    });

                    currentFilters.priceRange.forEach(range => {
                        addFilterTag('Price: ' + formatPriceRange(range), 'price-' + range);
                    });

                    // Show/hide clear all button
                    const clearButton = document.querySelector('.clear-filters-btn');
                    clearButton.style.display = hasActiveFilters() ? 'block' : 'none';
                }

                // Check if there are any active filters
                function hasActiveFilters() {
                    return Object.entries(currentFilters).some(([key, value]) => {
                        if (Array.isArray(value)) return value.length > 0;
                        return Boolean(value && key !== 'page');
                    });
                }

                // Format price range for display
                function formatPriceRange(range) {
                    if (range === '5000+') return 'Above ₹5,000';
                    const [min, max] = range.split('-');
                    return `₹${Number(min).toLocaleString()} - ₹${Number(max).toLocaleString()}`;
                }

                // Add filter tag
                function addFilterTag(text, id) {
                    const tag = document.createElement('div');
                    tag.className = 'filter-tag';
                    tag.innerHTML = `
            ${text}
            <button onclick="removeFilter('${id}')">&times;</button>
        `;
                    activeFilters.appendChild(tag);
                }

                // Remove filter
                window.removeFilter = function (filterId) {
                    if (filterId === 'search') {
                        currentFilters.search = '';
                        productSearch.value = '';
                    } else {
                        const [type, value] = filterId.split('-');
                        const filterKey = type + 's';
                        currentFilters[filterKey] = currentFilters[filterKey].filter(item => item !== value);

                        // Uncheck corresponding checkbox
                        const checkbox = document.querySelector(`input[name="${type}"][value="${value}"]`);
                        if (checkbox) checkbox.checked = false;
                    }

                    currentFilters.page = 1;
                    updateActiveFilters();
                    fetchProducts();
                };

                // Clear all filters
                document.querySelector('.clear-filters-btn').addEventListener('click', () => {
                    currentFilters = {
                        search: '',
                        category: [],
                        brands: [],
                        priceRange: [],
                        sort: '',
                        page: 1
                    };

                    // Reset all inputs
                    productSearch.value = '';
                    sortSelect.value = '';
                    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                        checkbox.checked = false;
                    });

                    updateActiveFilters();
                    fetchProducts();
                });

                // Event Listeners
                productSearch.addEventListener('input', debounce(() => {
                    currentFilters.search = productSearch.value;
                    currentFilters.page = 1;
                    updateActiveFilters();
                    fetchProducts();
                }, 300));

                // Category search
                categorySearch.addEventListener('input', debounce((e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    document.querySelectorAll('.category-list .checkbox-label').forEach(label => {
                        const categoryName = label.textContent.split('(')[0].trim().toLowerCase();
                        label.style.display = categoryName.includes(searchTerm) ? '' : 'none';
                    });
                }, 300));

                // Brand search
                brandSearch.addEventListener('input', debounce((e) => {
                    const searchTerm = e.target.value.toLowerCase();
                    document.querySelectorAll('.brand-list .checkbox-label').forEach(label => {
                        const brandName = label.textContent.split('(')[0].trim().toLowerCase();
                        label.style.display = brandName.includes(searchTerm) ? '' : 'none';
                    });
                }, 300));

                // Sort select
                sortSelect.addEventListener('change', () => {
                    currentFilters.sort = sortSelect.value;
                    currentFilters.page = 1;
                    fetchProducts();
                });

                function setupFilterCheckboxes(filterType) {
                    // Map filter types to their corresponding keys in currentFilters
                    const filterKeyMap = {
                        'category': 'category',
                        'brand': 'brands',
                        'price': 'priceRange'
                    };

                    document.querySelectorAll(`input[name="${filterType}"]`).forEach(checkbox => {
                        checkbox.addEventListener('change', e => {
                            const filterKey = filterKeyMap[filterType];

                            // Ensure the array exists before trying to modify it
                            if (!currentFilters[filterKey]) {
                                currentFilters[filterKey] = [];
                            }

                            if (e.target.checked) {
                                currentFilters[filterKey].push(e.target.value);
                            } else {
                                currentFilters[filterKey] = currentFilters[filterKey]
                                    .filter(item => item !== e.target.value);
                            }
                            currentFilters.page = 1;
                            updateActiveFilters();
                            fetchProducts();
                        });
                    });
                }

                // Setup all filter checkboxes
                setupFilterCheckboxes('category');
                setupFilterCheckboxes('brand');
                setupFilterCheckboxes('price');

                // Initialize filters from URL
                function initializeFiltersFromURL() {
                    const params = new URLSearchParams(window.location.search);

                    params.forEach((value, key) => {
                        if (Array.isArray(currentFilters[key])) {
                            currentFilters[key] = value.split(',');
                            // Check corresponding checkboxes
                            currentFilters[key].forEach(val => {
                                const checkbox = document.querySelector(`input[name="${key.slice(0, -1)}"][value="${val}"]`);
                                if (checkbox) checkbox.checked = true;
                            });
                        } else {
                            currentFilters[key] = value;
                            if (key === 'search') {
                                productSearch.value = value;
                            } else if (key === 'sort') {
                                sortSelect.value = value;
                            }
                        }
                    });

                    updateActiveFilters();
                }

                // Initialize
                initializeFiltersFromURL();
            });
            async function toggleWishlist(productId) {
				try {
					const response = await axios.post(`/shop/wishlist/toggle/${productId}`);

					if (response.data.success) {
						const wishlistIcon = document.querySelector(`.wishlist-icon[data-product-id="${productId}"]`);
						const heartIcon = wishlistIcon.querySelector('.fa-heart');

						if (response.data.added) {
							// Added to wishlist
							heartIcon.classList.remove('fa-regular');
							heartIcon.classList.add('fa-solid');

							Swal.fire({
								icon: 'success',
								title: 'Added to Wishlist!',
								text: response.data.message,
								showConfirmButton: false,
								timer: 1500,
								toast: true,
								position: 'top-end'
							});

							// Save to local storage
							localStorage.setItem(`wishlist_${productId}`, 'true');
						} else {
							// Removed from wishlist
							heartIcon.classList.remove('fa-solid');
							heartIcon.classList.add('fa-regular');

							Swal.fire({
								icon: 'info',
								title: 'Removed from Wishlist',
								text: response.data.message,
								showConfirmButton: false,
								timer: 1500,
								toast: true,
								position: 'top-end'
							});

							// Remove from local storage
							localStorage.removeItem(`wishlist_${productId}`);
						}
					} else {
						// Handle error (e.g., not logged in)
						Swal.fire({
							icon: 'error',
							title: 'Oops...',
							text: response.data.message
						});
					}
				} catch (error) {
					console.error('Wishlist error:', error);
					Swal.fire({
						icon: 'error',
						title: 'Error',
						text: 'Failed to update wishlist. Please try again.'
					});
				}
			}

			// Function to restore wishlist icon states on page load
			function restoreWishlistIcons() {
				const wishlistIcons = document.querySelectorAll('.wishlist-icon');

				wishlistIcons.forEach(icon => {
					const productId = icon.dataset.productId;
					const heartIcon = icon.querySelector('.fa-heart');

					// Check local storage for wishlist state
					if (localStorage.getItem(`wishlist_${productId}`) === 'true') {
						heartIcon.classList.remove('fa-regular');
						heartIcon.classList.add('fa-solid');
					}
				});
			}
        </script>
        <!--===============================================================================================-->
        <script src="vendor/perfect-scrollbar/perfect-scrollbar.min.js"></script>
        <script src="vendor/animsition/js/animsition.min.js"></script>

        <script>
            $('.js-pscroll').each(function () {
                $(this).css('position', 'relative');
                $(this).css('overflow', 'hidden');
                var ps = new PerfectScrollbar(this, {
                    wheelSpeed: 1,
                    scrollingThreshold: 1000,
                    wheelPropagation: false,
                });

                $(window).on('resize', function () {
                    ps.update();
                })
            });
        </script>
        <!--===============================================================================================-->
        <script src="js/main.js"></script>
</body>

</html>
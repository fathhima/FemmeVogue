<!DOCTYPE html>
<html lang="en">

<head>
    <title>Shoping Cart</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!--===============================================================================================-->
    <link rel="icon" type="image/png" href="/images/icons/favicon.png" />
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/bootstrap/css/bootstrap.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/iconic/css/material-design-iconic-font.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/fonts/linearicons-v1.0.0/icon-font.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animate/animate.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/css-hamburgers/hamburgers.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/animsition/css/animsition.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/vendor/select2/select2.min.css">
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="vendor/perfect-scrollbar/perfect-scrollbar.css">
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- Add SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <!-- Add SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!--===============================================================================================-->
    <link rel="stylesheet" type="text/css" href="/css/util.css">
    <link rel="stylesheet" type="text/css" href="/css/main.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <!--===============================================================================================-->
</head>

<body class="bg-gray-50">

    <!-- Navbar -->
    <%- include("partials/navbar") %>

        <div class="max-w-4xl mx-auto p-6 mt-5">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <!-- Left Column - Address and Payment -->
                <div class="md:col-span-2 space-y-6">
                    <!-- Shipping Address Section -->
                    <div class="bg-white p-6 rounded-lg shadow-sm mt-3" id="selected-address-display">
                        <div class="flex justify-between items-center mb-4">
                            <div class="flex items-center gap-2">
                                <input type="checkbox" checked class="w-4 h-4 text-blue-600" disabled>
                                <h2 class="text-lg font-semibold text-black">Shipping Address</h2>
                                <!-- Added explicit text-black class -->
                            </div>
                            <a href="/checkout/address" class="text-blue-600 text-sm hover:underline">Edit</a>
                        </div>
                        <div class="text-gray-600">
                            <!-- Dynamic content will be inserted here -->
                        </div>
                    </div>



                    <!-- Payment Section -->
                    <div class="bg-white p-6 rounded-lg shadow-sm">
                        <h2 class="text-lg font-semibold mb-4">Payment</h2>
                        <form id="paymentForm" action="/checkout/process-payment" method="POST">
                            <div class="space-y-3">
                                <div class="flex items-center gap-3">
                                    <input type="radio" name="paymentMethod" value="cod" id="cod" class="w-4 h-4">
                                    <label for="cod" class="flex-grow">
                                        <span class="font-medium">Cash on delivery</span>
                                    </label>
                                </div>
                                <div class="flex items-center gap-3">
                                    <input type="radio" name="paymentMethod" value="razorpay" id="razorpay"
                                        class="w-4 h-4">
                                    <label for="razorpay" class="flex-grow">
                                        <span class="font-medium">Razorpay</span>
                                    </label>
                                </div>
                                <div class="flex items-center gap-3">
                                    <input type="radio" name="paymentMethod" value="wallet" id="wallet" class="w-4 h-4">
                                    <label for="wallet" class="flex-grow">
                                        <span class="font-medium">Wallets</span>
                                    </label>
                                </div>
                            </div>
                            <button type="submit"
                                class="w-full bg-black text-white py-3 rounded mt-6 hover:bg-gray-800">
                                continue
                            </button>
                        </form>
                    </div>
                </div>

                <!-- Right Column - Order Summary -->
                <div class="md:col-span-1">
                    <div class="bg-white p-6 rounded-lg shadow-sm mt-3">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-lg font-semibold">Order summary</h2>
                            <a href="/cart" class="text-blue-600 text-sm hover:underline">Edit</a>
                        </div>
                        <div class="space-y-3">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Subtotal</span>
                                <span data-subtotal="<%= subtotal %>">₹<%= subtotal.toFixed(2) %></span>
                            </div>
                            <div class="border-t border-b py-3 mb-3">
                                <!-- Coupon section with applied state -->
                                <div id="couponDefault" class="flex items-center gap-2">
                                    <button onclick="openCouponModal()"
                                        class="text-blue-600 hover:text-blue-700 flex items-center gap-2">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                        </svg>
                                        Apply Coupon
                                    </button>
                                </div>
                                <!-- Applied coupon state -->
                                <div id="couponApplied" class="hidden">
                                    <div class="flex justify-between items-center">
                                        <div class="flex items-center gap-2">
                                            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor"
                                                viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                    d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                                            </svg>
                                            <div>
                                                <span class="text-green-600 font-medium" id="appliedCouponCode"></span>
                                                <span class="text-gray-500 text-sm ml-2" id="couponDiscount"></span>
                                            </div>
                                        </div>
                                        <button onclick="removeCoupon()"
                                            class="text-red-600 hover:text-red-700 text-sm">Remove</button>
                                    </div>
                                </div>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Shipping:</span>
                                <span data-shipping="<%= shippingCharge %>">₹<%= shippingCharge.toFixed(2) %></span>
                            </div>
                            <!-- Add savings row that shows up when coupon is applied -->
                            <div id="savingsRow" class="flex justify-between hidden">
                                <span class="text-green-600">Savings:</span>
                                <span class="text-green-600" data-savings="0">₹0.00</span>
                            </div>
                            <div class="border-t pt-3 flex justify-between font-semibold">
                                <span>Estimated total:</span>
                                <span data-total="<%= finalTotal %>">₹<%= finalTotal.toFixed(2) %></span>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="couponModal"
                    class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-semibold">Apply Coupon</h3>
                            <button onclick="closeCouponModal()" class="text-gray-500 hover:text-gray-700">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>

                        <!-- Coupon Input -->
                        <div class="mb-4">
                            <div class="flex gap-2">
                                <input type="text" id="couponInput" placeholder="Enter coupon code"
                                    class="w-full px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <button onclick="validateCoupon()"
                                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    Apply
                                </button>
                            </div>
                            <p id="couponMessage" class="mt-2 text-sm"></p>
                        </div>

                        <!-- Available Coupons -->
                        <div class="border-t pt-4">
                            <h4 class="font-medium mb-3">Available Coupons</h4>
                            <div id="availableCoupons" class="space-y-3">
                                <!-- Coupons will be populated here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Footer -->
        <%-include("partials/footer")%>

            <!-- Back to top -->
            <div class="btn-back-to-top" id="myBtn">
                <span class="symbol-btn-back-to-top">
                    <i class="zmdi zmdi-chevron-up"></i>
                </span>
            </div>

            <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
            <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
            <script>

                document.addEventListener('DOMContentLoaded', function () {
                    const paymentForm = document.getElementById('paymentForm');
                    const addressDisplayContainer = document.getElementById('selected-address-display');

                    // Payment Form Handler
                    if (paymentForm) {
                        paymentForm.addEventListener('submit', async function (e) {
                            e.preventDefault();

                            if (!validateAddressBeforePayment()) {
                                return false;
                            }

                            const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
                            if (!selectedPayment) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'Payment Method Required',
                                    text: 'Please select a payment method to continue',
                                    confirmButtonColor: '#3085d6'
                                });
                                return;
                            }

                            const paymentMethod = selectedPayment.value;

                            // Handle Cash on Delivery
                            if (paymentMethod === 'cod') {
                                try {
                                    // Show loading state
                                    Swal.fire({
                                        title: 'Processing Order',
                                        text: 'Please wait while we process your order...',
                                        allowOutsideClick: false,
                                        allowEscapeKey: false,
                                        showConfirmButton: false,
                                        didOpen: () => {
                                            Swal.showLoading();
                                        }
                                    });

                                    // Get shipping address from session storage
                                    const addressData = JSON.parse(sessionStorage.getItem('selectedAddress'));
                                    if (!addressData) {
                                        throw new Error('Shipping address not found');
                                    }

                                    // Create order data
                                    const orderData = {
                                        paymentMethod: 'cod',
                                        shippingAddress: addressData,
                                        couponCode: currentCouponCode
                                    };

                                    // Send order to server using Axios
                                    const response = await axios.post('/checkout/place-order-cod', orderData);

                                    // Validate response
                                    if (!response.data || !response.data.orderId) {
                                        throw new Error('Invalid order response from server');
                                    }

                                    // Show success message
                                    await Swal.fire({
                                        icon: 'success',
                                        title: 'Order Placed Successfully!',
                                        text: 'Redirecting to order confirmation...',
                                        timer: 2000,
                                        showConfirmButton: false
                                    });

                                    // Redirect to order confirmation
                                    window.location.href = `/order/confirmation/${response.data.orderId}`;

                                } catch (error) {
                                    console.error('Error placing order:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Order Failed',
                                        text: error.response?.data?.message || 'There was an error placing your order. Please try again.',
                                        confirmButtonColor: '#3085d6'
                                    });
                                }
                            }
                            // Handle Razorpay payment
                            else if (paymentMethod === 'razorpay') {
                                try {
                                    // Show loading state
                                    Swal.fire({
                                        title: 'Initializing Payment',
                                        text: 'Please wait...',
                                        allowOutsideClick: false,
                                        showConfirmButton: false,
                                        didOpen: () => {
                                            Swal.showLoading();
                                        }
                                    });

                                    // Get shipping address
                                    const addressData = JSON.parse(sessionStorage.getItem('selectedAddress'));
                                    if (!addressData) {
                                        throw new Error('Shipping address not found');
                                    }

                                    // Create Razorpay order
                                    const orderResponse = await axios.post('/checkout/create-razorpay-order', {
                                        shippingAddress: addressData
                                    });

                                    if (!orderResponse.data || !orderResponse.data.order) {
                                        throw new Error('Invalid Razorpay order response');
                                    }

                                    // Initialize Razorpay payment
                                    const options = {
                                        key: orderResponse.data.key_id,
                                        amount: orderResponse.data.order.amount,
                                        currency: orderResponse.data.order.currency,
                                        name: 'Your Store Name',
                                        description: 'Order Payment',
                                        order_id: orderResponse.data.order.id,
                                        handler: async function (response) {
                                            try {
                                                // Verify payment
                                                const verifyResponse = await axios.post('/checkout/verify-razorpay-payment', {
                                                    razorpay_order_id: response.razorpay_order_id,
                                                    razorpay_payment_id: response.razorpay_payment_id,
                                                    razorpay_signature: response.razorpay_signature
                                                });

                                                if (verifyResponse.data.orderId) {
                                                    // Show success message
                                                    await Swal.fire({
                                                        icon: 'success',
                                                        title: 'Payment Successful!',
                                                        text: 'Redirecting to order confirmation...',
                                                        timer: 2000,
                                                        showConfirmButton: false
                                                    });

                                                    // Redirect to order confirmation
                                                    window.location.href = `/order/confirmation/${verifyResponse.data.orderId}`;
                                                }
                                            } catch (error) {
                                                console.error('Payment verification failed:', error);
                                                Swal.fire({
                                                    icon: 'error',
                                                    title: 'Payment Verification Failed',
                                                    text: 'There was an error verifying your payment. Please contact support.',
                                                    confirmButtonColor: '#3085d6'
                                                });
                                            }
                                        },
                                        prefill: {
                                            name: addressData.name,
                                            contact: addressData.phone
                                        },
                                        theme: {
                                            color: '#3085d6'
                                        }
                                    };

                                    const razorpay = new Razorpay(options);
                                    razorpay.open();

                                } catch (error) {
                                    console.error('Razorpay payment failed:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: 'Could not initialize Razorpay payment. Please try again.',
                                        confirmButtonColor: '#3085d6'
                                    });
                                }
                            }
                            // Handle Wallet payment
                            else if (paymentMethod === 'wallet') {
                                try {
                                    // Show loading state
                                    Swal.fire({
                                        title: 'Processing Wallet Payment',
                                        text: 'Please wait...',
                                        allowOutsideClick: false,
                                        showConfirmButton: false,
                                        didOpen: () => {
                                            Swal.showLoading();
                                        }
                                    });

                                    // Get shipping address
                                    const addressData = JSON.parse(sessionStorage.getItem('selectedAddress'));
                                    if (!addressData) {
                                        throw new Error('Shipping address not found');
                                    }

                                    // Process wallet payment
                                    const response = await axios.post('/checkout/process-wallet-payment', {
                                        shippingAddress: addressData
                                    });

                                    if (!response.data || !response.data.orderId) {
                                        throw new Error('Invalid wallet payment response');
                                    }

                                    // Show success message
                                    await Swal.fire({
                                        icon: 'success',
                                        title: 'Payment Successful!',
                                        text: 'Redirecting to order confirmation...',
                                        timer: 2000,
                                        showConfirmButton: false
                                    });

                                    // Redirect to order confirmation
                                    window.location.href = `/order/confirmation/${response.data.orderId}`;

                                } catch (error) {
                                    console.error('Wallet payment failed:', error);
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Payment Failed',
                                        text: error.response?.data?.message || 'Could not process wallet payment. Please try again.',
                                        confirmButtonColor: '#3085d6'
                                    });
                                }
                            }
                        });
                    }

                    // Address Display Functions
                    function displaySelectedAddress() {
                        try {
                            const savedAddress = sessionStorage.getItem('selectedAddress');

                            if (!savedAddress) {
                                Swal.fire({
                                    icon: 'warning',
                                    title: 'No Address Selected',
                                    text: 'Please select a delivery address to continue',
                                    confirmButtonColor: '#3085d6',
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        window.location.href = '/checkout/address';
                                    }
                                });
                                return;
                            }

                            const addressData = JSON.parse(savedAddress);

                            // Validate required address fields
                            if (!addressData.name || !addressData.addressLine || !addressData.phone) {
                                throw new Error('Invalid address data');
                            }

                            // Create the address display HTML
                            const addressHTML = `
                <div class="flex justify-between items-center mb-4">
                    <div class="flex items-center gap-2">
                        <input type="checkbox" checked class="w-4 h-4 text-blue-600" disabled>
                        <h2 class="text-lg font-semibold text-black">Shipping Address</h2>
                    </div>
                    <a href="/checkout/address" class="text-blue-600 text-sm hover:underline">Change</a>
                </div>
                <div class="border rounded-lg p-4 bg-gray-50">
                    <div class="flex justify-between items-start mb-2">
                        <div>
                            <h3 class="font-semibold text-gray-800">${addressData.name}</h3>
                            <span class="inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded mt-1">
                                ${addressData.addressType || 'Home'}
                            </span>
                        </div>
                    </div>
                    <div class="mt-2 text-gray-600">
                        <p class="text-sm leading-relaxed">${addressData.addressLine}</p>
                        <p class="text-sm mt-1">
                            <span class="font-medium text-gray-700">Phone:</span> ${addressData.phone}
                        </p>
                    </div>
                </div>
            `;

                            if (addressDisplayContainer) {
                                addressDisplayContainer.innerHTML = addressHTML;
                            }

                        } catch (error) {
                            console.error('Error displaying address:', error);
                            Swal.fire({
                                icon: 'error',
                                title: 'Address Error',
                                text: 'There was an error loading the delivery address. Please select again.',
                                confirmButtonColor: '#3085d6',
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/checkout/address';
                                }
                            });
                        }
                    }

                    // Validate address before payment
                    function validateAddressBeforePayment() {
                        const savedAddress = sessionStorage.getItem('selectedAddress');

                        if (!savedAddress) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Address Required',
                                text: 'Please select a delivery address before proceeding with payment',
                                confirmButtonColor: '#3085d6',
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/checkout/address';
                                }
                            });
                            return false;
                        }
                        return true;
                    }

                    // Page leave confirmation
                    window.addEventListener('beforeunload', function (e) {
                        const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
                        if (selectedPayment) {
                            e.preventDefault();
                            e.returnValue = '';

                            Swal.fire({
                                title: 'Are you sure?',
                                text: 'Your order is not complete. Are you sure you want to leave?',
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, leave page',
                                cancelButtonText: 'Stay on page'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    window.location.href = '/cart';
                                }
                            });
                        }
                    });

                    // Listen for address changes
                    window.addEventListener('storage', function (e) {
                        if (e.key === 'selectedAddress') {
                            displaySelectedAddress();
                        }
                    });

                    // Initial address display
                    displaySelectedAddress();
                });

                const modal = document.getElementById('couponModal');
                const couponInput = document.getElementById('couponInput');
                const couponMessage = document.getElementById('couponMessage');
                const availableCouponsContainer = document.getElementById('availableCoupons');
                const couponDefault = document.getElementById('couponDefault');
                const couponApplied = document.getElementById('couponApplied');
                const savingsRow = document.getElementById('savingsRow');
                let currentCouponCode = null;

                function openCouponModal() {
                    modal.classList.remove('hidden');
                    modal.classList.add('flex');
                    loadAvailableCoupons();
                }

                function closeCouponModal() {
                    modal.classList.add('hidden');
                    modal.classList.remove('flex');
                    couponMessage.textContent = '';
                    couponMessage.className = 'mt-2 text-sm';
                    couponInput.value = '';
                }

                async function loadAvailableCoupons() {
                    try {
                        const response = await axios.get('/cart/coupons/available');
                        const coupons = response.data;

                        availableCouponsContainer.innerHTML = coupons
                            .map(coupon => `
                <div class="border rounded-lg p-3 hover:border-blue-500 cursor-pointer"
                     onclick="applyCouponCode('${coupon.name}')">
                    <div class="flex justify-between items-start">
                        <div>
                            <span class="font-medium text-blue-600">${coupon.name}</span>
                            <p class="text-sm text-gray-600 mt-1">${coupon.description}</p>
                        </div>
                        <button class="text-blue-600 text-sm hover:underline">Apply</button>
                    </div>
                    <div class="mt-2 text-xs text-gray-500">
                        Min. Purchase: ₹${coupon.minimumPurchase} | 
                        Expires: ${new Date(coupon.validUntil).toLocaleDateString()}
                    </div>
                </div>
            `).join('');
                    } catch (error) {
                        console.error('Error loading coupons:', error);
                        availableCouponsContainer.innerHTML = '<p class="text-red-500">Error loading available coupons</p>';
                    }
                }

                function applyCouponCode(code) {
                    couponInput.value = code;
                    validateCoupon();
                }

                async function validateCoupon() {
                    const code = couponInput.value.trim();
                    if (!code) {
                        showCouponMessage('Please enter a coupon code', 'error');
                        return;
                    }

                    try {
                        const subtotal = parseFloat(document.querySelector('[data-subtotal]').dataset.subtotal);
                        const response = await axios.post('/cart/coupons/apply', {
                            couponCode: code,
                            cartTotal: subtotal
                        });

                        if (response.data.success) {
                            const discount = response.data.couponDetails.discountAmount;
                            showCouponMessage(`Coupon applied! You saved ₹${discount.toFixed(2)}`, 'success');
                            updateOrderSummary(discount);
                            showAppliedCoupon(code, discount);
                            currentCouponCode = code;
                            setTimeout(closeCouponModal, 1500);
                        }
                    } catch (error) {
                        const message = error.response?.data?.message || 'Error validating coupon';
                        showCouponMessage(message, 'error');
                    }
                }

                function showCouponMessage(message, type) {
                    couponMessage.textContent = message;
                    couponMessage.className = `mt-2 text-sm ${type === 'success' ? 'text-green-600' : 'text-red-600'}`;
                }

                function showAppliedCoupon(code, discount) {
                    document.getElementById('appliedCouponCode').textContent = code;
                    document.getElementById('couponDiscount').textContent = `(-₹${discount.toFixed(2)})`;
                    couponDefault.classList.add('hidden');
                    couponApplied.classList.remove('hidden');
                    savingsRow.classList.remove('hidden');
                }

                function resetCouponState() {
                    couponDefault.classList.remove('hidden');
                    couponApplied.classList.add('hidden');
                    savingsRow.classList.add('hidden');
                    currentCouponCode = null;
                }

                async function removeCoupon() {
                    if (!currentCouponCode) return;

                    try {
                        const response = await axios.post('/cart/coupons/remove', {
                            couponCode: currentCouponCode
                        });

                        if (response.data.success) {
                            const savingsEl = document.querySelector('[data-savings]');
                            const discount = parseFloat(savingsEl.dataset.savings);
                            updateOrderSummary(-discount); // Remove the discount amount
                            resetCouponState();
                        }
                    } catch (error) {
                        console.error('Error removing coupon:', error);
                        // Optionally show an error message to the user
                    }
                }

                function updateOrderSummary(discountAmount) {
                    const subtotalEl = document.querySelector('[data-subtotal]');
                    const totalEl = document.querySelector('[data-total]');
                    const savingsEl = document.querySelector('[data-savings]');

                    const subtotal = parseFloat(subtotalEl.dataset.subtotal);
                    const shipping = parseFloat(document.querySelector('[data-shipping]').dataset.shipping);

                    // Update savings
                    const currentSavings = parseFloat(savingsEl.dataset.savings || 0);
                    const newSavings = currentSavings + discountAmount;
                    savingsEl.textContent = `₹${newSavings.toFixed(2)}`;
                    savingsEl.dataset.savings = newSavings;

                    // Update total
                    const newTotal = subtotal + shipping - newSavings;
                    totalEl.textContent = `₹${newTotal.toFixed(2)}`;
                    totalEl.dataset.total = newTotal;
                }

                // Close modal when clicking outside
                modal.addEventListener('click', (e) => {
                    if (e.target === modal) {
                        closeCouponModal();
                    }
                });

            </script>

            <!--===============================================================================================-->
            <script src="/js/main.js"></script>


</body>

</html>
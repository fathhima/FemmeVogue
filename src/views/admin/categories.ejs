<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - FemmeVogue</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/admin/index.css"> <!-- Custom CSS -->
</head>

<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        <%- include("partials/sidebar") %>

            <!-- Page Content -->
            <div id="page-content-wrapper">
                <%- include("partials/navbar") %>

                    <div class="container-fluid">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h1 class="mt-4">Category Management</h1>
                            <button class="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addCategoryModal">Add New Category</button>
                        </div>

                        <div class="table-responsive">
                            <table class="table table-striped table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">SI</th>
                                        <th scope="col">Category Name</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% categories.forEach((category, index)=> { %>
                                        <tr>
                                            <th scope="row">
                                                <%= index + 1 %>
                                            </th>
                                            <td>
                                                <%= category.name %>
                                            </td>
                                            <td>
                                                <% if (category.isDeleted) { %>
                                                    <span class="text-danger">Unlisted</span>
                                                    <% } else { %>
                                                        <span class="text-success">Listed</span>
                                                        <% } %>
                                            </td>
                                            <td>
                                                <button class="btn btn-warning"
                                                    onclick="showEditCategoryModal('<%= category._id %>', '<%= category.name %>')">Edit</button>
                                                <% if (category.isDeleted) { %>
                                                    <button class="btn btn-success"
                                                        onclick="toggleCategoryStatus('<%= category._id %>')">List</button>
                                                    <% } else { %>
                                                        <button class="btn btn-danger"
                                                            onclick="toggleCategoryStatus('<%= category._id %>')">Unlist</button>
                                                        <% } %>
                                            </td>
                                        </tr>
                                        <% }) %>
                                </tbody>
                            </table>
                        </div>
                    </div>
            </div>
    </div>

    <!-- Add Category Modal -->
    <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addCategoryModalLabel">Add New Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addCategoryForm">
                        <div class="mb-3">
                            <label for="categoryName" class="form-label">Category Name</label>
                            <input type="text" class="form-control" id="categoryName" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="addCategory()">Add Category</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Category Modal -->
    <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="editCategoryForm">
                        <input type="hidden" id="editCategoryId">
                        <div class="mb-3">
                            <label for="editCategoryName" class="form-label">Category Name</label>
                            <input type="text" class="form-control" id="editCategoryName" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="updateCategory()">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap and Axios JS -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Function to validate category name
        function validateCategoryName(name) {
            const nameRegex = /^[A-Za-z0-9\s]{2,}$/; // Alphanumeric with at least 2 characters
            return nameRegex.test(name);
        }
    
        // Display validation message
        function displayValidationMessage(inputElement, message) {
            let validationMessage = inputElement.nextElementSibling;
    
            // Create the validation message element if it doesn't exist
            if (!validationMessage || !validationMessage.classList.contains('validation-message')) {
                validationMessage = document.createElement('div');
                validationMessage.classList.add('text-danger', 'mt-1', 'validation-message');
                inputElement.parentNode.appendChild(validationMessage);
            }
            
            validationMessage.textContent = message;
        }
    
        // Add a new category with error handling
function addCategory() {
    const categoryNameInput = document.getElementById('categoryName');
    const categoryName = categoryNameInput.value.trim();

    // Validate category name before sending the request
    if (!validateCategoryName(categoryName)) {
        displayValidationMessage(categoryNameInput, 'Category name must be at least 2 characters and alphanumeric.');
        return;
    }

    // Clear any existing validation message
    displayValidationMessage(categoryNameInput, '');

    axios.post('/admin/categories/add', { name: categoryName })
        .then(response => {
            if (response.data.success) {
                location.reload(); // Refresh the page after adding
            } else {
                displayValidationMessage(categoryNameInput, response.data.message || 'Failed to add category.');
            }
        })
        .catch(error => {
            console.error('Error adding category:', error);
            const errorMessage = error.response && error.response.data && error.response.data.message 
                                ? error.response.data.message 
                                : 'An unexpected error occurred.';
            displayValidationMessage(categoryNameInput, errorMessage);
        });
}

    
        // Show the edit category modal and populate fields
        function showEditCategoryModal(categoryId, categoryName) {
            document.getElementById('editCategoryId').value = categoryId;
            document.getElementById('editCategoryName').value = categoryName;
            const editModal = new bootstrap.Modal(document.getElementById('editCategoryModal'));
            editModal.show();
        }
    
        // Update category with validation
        function updateCategory() {
    const categoryId = document.getElementById('editCategoryId').value;
    const categoryName = document.getElementById('editCategoryName').value;

    axios.patch(`/admin/categories/edit/${categoryId}`, { name: categoryName })
        .then(response => {
            if (response.data.success) {
                location.reload(); // Reload the page upon successful update
            }
        })
        .catch(error => {
            if (error.response && error.response.data && error.response.data.message) {
                // Display the error message from the server
                document.getElementById('editErrorMessage').innerText = error.response.data.message;
            } else {
                console.error('Unexpected error:', error);
            }
        });
}

        // Toggle category listing (list/unlist)
        function toggleCategoryStatus(categoryId) {
            axios.patch(`/admin/categories/toggle/${categoryId}`)
                .then(response => {
                    if (response.data.success) {
                        location.reload(); // Refresh the page after toggling
                    } else {
                        alert('Failed to toggle category status.');
                    }
                })
                .catch(error => {
                    console.error('Error toggling category status:', error);
                });
        }
    
        // Restore category
        function restoreCategory(categoryId) {
            axios.post(`/admin/categories/restore/${categoryId}`)
                .then(response => {
                    if (response.data.success) {
                        location.reload(); // Refresh the page after restoring
                    } else {
                        alert('Failed to restore category.');
                    }
                })
                .catch(error => {
                    console.error('Error restoring category:', error);
                });
        }
    
        // Real-time validation for Add and Edit category inputs
        document.addEventListener('DOMContentLoaded', () => {
            const addCategoryInput = document.getElementById('categoryName');
            const editCategoryInput = document.getElementById('editCategoryName');
    
            addCategoryInput.addEventListener('input', () => {
                if (validateCategoryName(addCategoryInput.value)) {
                    displayValidationMessage(addCategoryInput, '');
                } else {
                    displayValidationMessage(addCategoryInput, 'Category name must be at least 2 characters and alphanumeric.');
                }
            });
    
            editCategoryInput.addEventListener('input', () => {
                if (validateCategoryName(editCategoryInput.value)) {
                    displayValidationMessage(editCategoryInput, '');
                } else {
                    displayValidationMessage(editCategoryInput, 'Category name must be at least 2 characters and alphanumeric.');
                }
            });
        });
    </script>
    
</body>
</html>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - FemmeVogue</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/admin/index.css"> <!-- Custom CSS -->

</head>

<body>
    <div class="d-flex" id="wrapper">
        <!-- Sidebar -->
        <%- include("partials/sidebar") %>

            <!-- Page Content -->
            <div id="page-content-wrapper">
                <%- include("partials/navbar") %>

                <div class="container mt-4">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h2>Coupon Management</h2>
                        <div>
                            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#couponModal">
                                <i class="fas fa-plus"></i> Add New Coupon
                            </button>
                        </div>
                    </div>
                
                    <!-- Filter Controls -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <select class="form-select" id="typeFilter">
                                <option value="all">All Coupons</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                                <option value="public">Public</option>
                                <option value="userSpecific">User Specific</option>
                            </select>
                        </div>
                    </div>
                
                    <!-- Coupons Table -->
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Name</th>
                                    <th>Discount</th>
                                    <th>Valid Period</th>
                                    <th>Min Purchase</th>
                                    <th>Usage</th>
                                    <th>Status</th>
                                    <th>User Specific</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="couponsList">
                                <!-- Populated dynamically -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Coupon Modal -->
                <div class="modal fade" id="couponModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="modalTitle">Add New Coupon</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <form id="couponForm" class="needs-validation" novalidate>
                                    <input type="hidden" name="couponId" id="couponId">
                                    
                                    <div class="row g-3">
                                        <div class="col-md-6">
                                            <label class="form-label">Name</label>
                                            <input type="text" class="form-control" name="name" required>
                                            <div class="invalid-feedback">Please provide a coupon name</div>
                                        </div>
                                        
                                        <div class="col-md-6">
                                            <label class="form-label">Discount Type</label>
                                            <select class="form-select" name="discountType" required>
                                                <option value="percentage">Percentage</option>
                                                <option value="fixed">Fixed Amount</option>
                                            </select>
                                        </div>
                
                                        <div class="col-12">
                                            <label class="form-label">Description</label>
                                            <textarea class="form-control" name="description" required rows="3"></textarea>
                                        </div>
                
                                        <div class="col-md-6">
                                            <label class="form-label">Discount Amount</label>
                                            <input type="number" class="form-control" name="discountAmount" required min="0">
                                        </div>
                
                                        <div class="col-md-6">
                                            <label class="form-label">Maximum Discount</label>
                                            <input type="number" class="form-control" name="maxDiscount" min="0">
                                        </div>
                
                                        <div class="col-md-6">
                                            <label class="form-label">Valid From</label>
                                            <input type="datetime-local" class="form-control" name="validFrom" required>
                                        </div>
                
                                        <div class="col-md-6">
                                            <label class="form-label">Valid Until</label>
                                            <input type="datetime-local" class="form-control" name="validUntil" required>
                                        </div>
                
                                        <div class="col-md-4">
                                            <label class="form-label">Minimum Purchase</label>
                                            <input type="number" class="form-control" name="minimumPurchase" value="0" min="0">
                                        </div>
                
                                        <div class="col-md-4">
                                            <label class="form-label">Usage Limit</label>
                                            <input type="number" class="form-control" name="usageLimit" min="1">
                                        </div>
                
                                        <div class="col-md-4">
                                            <div class="form-check mt-4">
                                                <input class="form-check-input" type="checkbox" name="userSpecific" id="userSpecific">
                                                <label class="form-check-label" for="userSpecific">
                                                    User Specific
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                
                                    <div class="mt-4">
                                        <button type="submit" class="btn btn-primary">Save Coupon</button>
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    </div>

<!-- Add these to your layout -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        loadCoupons();
        setupEventListeners();
    });
    
    function setupEventListeners() {
        const couponForm = document.getElementById('couponForm');
        const typeFilter = document.getElementById('typeFilter');
    
        couponForm.addEventListener('submit', handleCouponSubmit);
        typeFilter.addEventListener('change', () => loadCoupons(typeFilter.value));
    }
    
    async function loadCoupons(filter = 'all') {
        try {
            const response = await axios.get(`/admin/coupons?filter=${filter}`);
            const coupons = response.data.coupons;
            const couponsList = document.getElementById('couponsList');
            
            couponsList.innerHTML = coupons
                .filter(coupon => filter === 'all' || 
                    (filter === 'userSpecific' ? coupon.userSpecific : !coupon.userSpecific))
                .map(coupon => `
                    <tr>
                        <td>${coupon.name}</td>
                        <td>${coupon.discountType === 'percentage' ? 
                            coupon.discountAmount + '%' : 
                            '$' + coupon.discountAmount}</td>
                        <td>
                            ${new Date(coupon.validFrom).toLocaleDateString()} -
                            ${new Date(coupon.validUntil).toLocaleDateString()}
                        </td>
                        <td>$${coupon.minimumPurchase}</td>
                        <td>${coupon.usedCount}/${coupon.usageLimit || '∞'}</td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" 
                                    ${coupon.isActive ? 'checked' : ''}
                                    onchange="toggleStatus('${coupon._id}', 'active')">
                            </div>
                        </td>
                        <td>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" 
                                    ${coupon.userSpecific ? 'checked' : ''}
                                    onchange="toggleStatus('${coupon._id}', 'userSpecific')">
                            </div>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary me-1" onclick="editCoupon('${coupon._id}')">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteCoupon('${coupon._id}')">
                                <i class="fas fa-trash"></i>
                            </button>
                        </td>
                    </tr>
                `).join('');
        } catch (error) {
            showAlert('error', 'Failed to load coupons');
        }
    }
    
    async function handleCouponSubmit(e) {
        e.preventDefault();
        if (!e.target.checkValidity()) {
            e.stopPropagation();
            e.target.classList.add('was-validated');
            return;
        }
    
        const formData = new FormData(e.target);
        const data = Object.fromEntries(formData);
        const couponId = data.couponId;
        delete data.couponId;
    
        // Convert form data to match schema
        data.userSpecific = formData.has('userSpecific');
        data.isActive = true;
        data.discountAmount = Number(data.discountAmount);
        data.minimumPurchase = Number(data.minimumPurchase);
        data.maxDiscount = data.maxDiscount ? Number(data.maxDiscount) : undefined;
        data.usageLimit = data.usageLimit ? Number(data.usageLimit) : undefined;
    
        try {
            const url = couponId ? `/admin/coupons/${couponId}` : '/admin/coupons';
            const method = couponId ? 'put' : 'post';
            
            const response = await axios[method](url, data);
            
            if (response.data.success) {
                showAlert('success', `Coupon ${couponId ? 'updated' : 'created'} successfully`);
                bootstrap.Modal.getInstance(document.getElementById('couponModal')).hide();
                loadCoupons();
            }
        } catch (error) {
            showAlert('error', error.response?.data?.message || 'Failed to save coupon');
        }
    }
    
    async function toggleStatus(couponId, type) {
        try {
            const response = await axios.patch(`/admin/coupons/${couponId}/toggle`, { type });
            if (response.data.success) {
                showAlert('success', `Coupon ${type} status updated`);
                loadCoupons();
            }
        } catch (error) {
            showAlert('error', 'Failed to update status');
            loadCoupons();
        }
    }
    
    async function editCoupon(couponId) {
        try {
            const response = await axios.get(`/admin/coupons/${couponId}`);
            const coupon = response.data.coupon;
            
            document.getElementById('modalTitle').textContent = 'Edit Coupon';
            document.getElementById('couponId').value = couponId;
            
            // Populate form fields
            const form = document.getElementById('couponForm');
            Object.keys(coupon).forEach(key => {
                const input = form.elements[key];
                if (input) {
                    if (key === 'validFrom' || key === 'validUntil') {
                        input.value = new Date(coupon[key]).toISOString().slice(0, 16);
                    } else if (key === 'userSpecific') {
                        input.checked = coupon[key];
                    } else {
                        input.value = coupon[key];
                    }
                }
            });
    
            const modal = new bootstrap.Modal(document.getElementById('couponModal'));
            modal.show();
        } catch (error) {
            showAlert('error', 'Failed to load coupon details');
        }
    }
    
    async function deleteCoupon(couponId) {
        const result = await Swal.fire({
            title: 'Delete Coupon?',
            text: "This action cannot be undone",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Delete'
        });
    
        if (result.isConfirmed) {
            try {
                const response = await axios.delete(`/admin/coupons/${couponId}`);
                if (response.data.success) {
                    showAlert('success', 'Coupon deleted successfully');
                    loadCoupons();
                }
            } catch (error) {
                showAlert('error', 'Failed to delete coupon');
            }
        }
    }
    
    function showAlert(icon, text) {
        Swal.fire({
            icon,
            text,
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 3000
        });
    }
    
    // Reset form when modal is closed
    document.getElementById('couponModal').addEventListener('hidden.bs.modal', function () {
        const form = document.getElementById('couponForm');
        form.reset();
        form.classList.remove('was-validated');
        document.getElementById('couponId').value = '';
        document.getElementById('modalTitle').textContent = 'Add New Coupon';
    });
    </script>

